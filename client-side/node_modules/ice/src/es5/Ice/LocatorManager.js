"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice;

require("../Ice/HashMap");

require("../Ice/Locator");

require("../Ice/LocatorInfo");

require("../Ice/LocatorTable");

var HashMap = Ice.HashMap;
var LocatorInfo = Ice.LocatorInfo;
var LocatorPrx = Ice.LocatorPrx;
var LocatorTable = Ice.LocatorTable;

var LocatorManager = /*#__PURE__*/function () {
  function LocatorManager(properties) {
    _classCallCheck(this, LocatorManager);

    this._background = properties.getPropertyAsInt("Ice.BackgroundLocatorCacheUpdates") > 0;
    this._table = new HashMap(HashMap.compareEquals); // Map<Ice.LocatorPrx, LocatorInfo>

    this._locatorTables = new HashMap(HashMap.compareEquals); // Map<Ice.Identity, LocatorTable>
  }

  _createClass(LocatorManager, [{
    key: "destroy",
    value: function destroy() {
      var _iterator = _createForOfIteratorHelper(this._table.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var locator = _step.value;
          locator.destroy();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this._table.clear();

      this._locatorTables.clear();
    } //
    // Returns locator info for a given locator. Automatically creates
    // the locator info if it doesn't exist yet.
    //

  }, {
    key: "find",
    value: function find(loc) {
      if (loc === null) {
        return null;
      } //
      // The locator can't be located.
      //


      var locator = LocatorPrx.uncheckedCast(loc.ice_locator(null)); //
      // TODO: reap unused locator info objects?
      //

      var info = this._table.get(locator);

      if (info === undefined) {
        //
        // Rely on locator identity for the adapter table. We want to
        // have only one table per locator (not one per locator
        // proxy).
        //
        var table = this._locatorTables.get(locator.ice_getIdentity());

        if (table === undefined) {
          table = new LocatorTable();

          this._locatorTables.set(locator.ice_getIdentity(), table);
        }

        info = new LocatorInfo(locator, table, this._background);

        this._table.set(locator, info);
      }

      return info;
    }
  }]);

  return LocatorManager;
}();

Ice.LocatorManager = LocatorManager;
module.exports.Ice = Ice;