"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice; //
// Ice.EnumBase
//


var EnumBase = /*#__PURE__*/function () {
  function EnumBase(name, value) {
    _classCallCheck(this, EnumBase);

    this._name = name;
    this._value = value;
  }

  _createClass(EnumBase, [{
    key: "equals",
    value: function equals(rhs) {
      if (this === rhs) {
        return true;
      }

      if (!(rhs instanceof Object.getPrototypeOf(this).constructor)) {
        return false;
      }

      return this._value == rhs._value;
    }
  }, {
    key: "hashCode",
    value: function hashCode() {
      return this._value;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this._name;
    }
  }, {
    key: "name",
    get: function get() {
      return this._name;
    }
  }, {
    key: "value",
    get: function get() {
      return this._value;
    }
  }]);

  return EnumBase;
}();

Ice.EnumBase = EnumBase;

var EnumHelper = /*#__PURE__*/function () {
  function EnumHelper(enumType) {
    _classCallCheck(this, EnumHelper);

    this._enumType = enumType;
  }

  _createClass(EnumHelper, [{
    key: "write",
    value: function write(os, v) {
      this._enumType._write(os, v);
    }
  }, {
    key: "writeOptional",
    value: function writeOptional(os, tag, v) {
      this._enumType._writeOpt(os, tag, v);
    }
  }, {
    key: "read",
    value: function read(is) {
      return this._enumType._read(is);
    }
  }, {
    key: "readOptional",
    value: function readOptional(is, tag) {
      return this._enumType._readOpt(is, tag);
    }
  }]);

  return EnumHelper;
}();

Ice.EnumHelper = EnumHelper;
var Slice = Ice.Slice;

Slice.defineEnum = function (enumerators) {
  var type = /*#__PURE__*/function (_EnumBase) {
    _inherits(type, _EnumBase);

    var _super = _createSuper(type);

    function type() {
      _classCallCheck(this, type);

      return _super.apply(this, arguments);
    }

    return _createClass(type);
  }(EnumBase);

  var enums = [];
  var maxValue = 0;
  var firstEnum = null;

  for (var idx in enumerators) {
    var e = enumerators[idx][0];
    var value = enumerators[idx][1];
    var enumerator = new type(e, value);
    enums[value] = enumerator;

    if (!firstEnum) {
      firstEnum = enumerator;
    }

    Object.defineProperty(type, e, {
      enumerable: true,
      value: enumerator
    });

    if (value > maxValue) {
      maxValue = value;
    }
  }

  Object.defineProperty(type, "minWireSize", {
    get: function get() {
      return 1;
    }
  });

  type._write = function (os, v) {
    if (v) {
      os.writeEnum(v);
    } else {
      os.writeEnum(firstEnum);
    }
  };

  type._read = function (is) {
    return is.readEnum(type);
  };

  type._writeOpt = function (os, tag, v) {
    if (v !== undefined) {
      if (os.writeOptional(tag, Ice.OptionalFormat.Size)) {
        type._write(os, v);
      }
    }
  };

  type._readOpt = function (is, tag) {
    return is.readOptionalEnum(tag, type);
  };

  type._helper = new EnumHelper(type);
  Object.defineProperty(type, 'valueOf', {
    value: function value(v) {
      if (v === undefined) {
        return type;
      }

      return enums[v];
    }
  });
  Object.defineProperty(type, 'maxValue', {
    value: maxValue
  });
  Object.defineProperty(type.prototype, 'maxValue', {
    value: maxValue
  });
  return type;
};

module.exports.Ice = Ice;