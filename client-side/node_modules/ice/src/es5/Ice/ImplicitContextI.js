"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice;

require("../Ice/Current");

require("../Ice/LocalException");

var Context = Ice.Context;
var InitializationException = Ice.InitializationException; //
// The base class for all ImplicitContext implementations
//

var ImplicitContextI = /*#__PURE__*/function () {
  function ImplicitContextI() {
    _classCallCheck(this, ImplicitContextI);

    this._context = new Context();
  }

  _createClass(ImplicitContextI, [{
    key: "getContext",
    value: function getContext() {
      return new Context(this._context);
    }
  }, {
    key: "setContext",
    value: function setContext(context) {
      if (context !== null && context.size > 0) {
        this._context = new Context(context);
      } else {
        this._context.clear();
      }
    }
  }, {
    key: "containsKey",
    value: function containsKey(key) {
      if (key === null) {
        key = "";
      }

      return this._context.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      if (key === null) {
        key = "";
      }

      var val = this._context.get(key);

      if (val === null) {
        val = "";
      }

      return val;
    }
  }, {
    key: "put",
    value: function put(key, value) {
      if (key === null) {
        key = "";
      }

      if (value === null) {
        value = "";
      }

      var oldVal = this._context.get(key);

      if (oldVal === null) {
        oldVal = "";
      }

      this._context.set(key, value);

      return oldVal;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      if (key === null) {
        key = "";
      }

      var val = this._context.get(key);

      this._context.delete(key);

      if (val === null) {
        val = "";
      }

      return val;
    }
  }, {
    key: "write",
    value: function write(prxContext, os) {
      if (prxContext.size === 0) {
        Ice.ContextHelper.write(os, this._context);
      } else {
        var ctx = null;

        if (this._context.size === 0) {
          ctx = prxContext;
        } else {
          ctx = new Context(this._context);

          var _iterator = _createForOfIteratorHelper(prxContext),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _step$value = _slicedToArray(_step.value, 2),
                  key = _step$value[0],
                  value = _step$value[1];

              ctx.set(key, value);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        Ice.ContextHelper.write(os, ctx);
      }
    }
  }], [{
    key: "create",
    value: function create(kind) {
      if (kind.length === 0 || kind === "None") {
        return null;
      } else if (kind === "Shared") {
        return new ImplicitContextI();
      } else {
        throw new InitializationException("'" + kind + "' is not a valid value for Ice.ImplicitContext");
      }
    }
  }]);

  return ImplicitContextI;
}();

Ice.ImplicitContextI = ImplicitContextI;
module.exports.Ice = Ice;