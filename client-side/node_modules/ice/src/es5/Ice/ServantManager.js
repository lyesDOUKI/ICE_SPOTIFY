"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice;

require("../Ice/Debug");

require("../Ice/HashMap");

require("../Ice/IdentityUtil");

require("../Ice/LocalException");

require("../Ice/StringUtil");

var Debug = Ice.Debug;
var HashMap = Ice.HashMap;
var StringUtil = Ice.StringUtil; //
// Only for use by Ice.ObjectAdatperI.
//

var ServantManager = /*#__PURE__*/function () {
  function ServantManager(instance, adapterName) {
    _classCallCheck(this, ServantManager);

    this._instance = instance;
    this._adapterName = adapterName; // Map<Ice.Identity, Map<String, Ice.Object> >

    this._servantMapMap = new HashMap(HashMap.compareEquals); // Map<String, Ice.Object>

    this._defaultServantMap = new Map(); // Map<String, Ice.ServantLocator>

    this._locatorMap = new Map();
  }

  _createClass(ServantManager, [{
    key: "addServant",
    value: function addServant(servant, ident, facet) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      if (facet === null) {
        facet = "";
      }

      var m = this._servantMapMap.get(ident);

      if (m === undefined) {
        m = new Map();

        this._servantMapMap.set(ident, m);
      } else if (m.has(facet)) {
        var ex = new Ice.AlreadyRegisteredException();
        ex.id = Ice.identityToString(ident, this._instance.toStringMode());
        ex.kindOfObject = "servant";

        if (facet.length > 0) {
          ex.id += " -f " + StringUtil.escapeString(facet, "", this._instance.toStringMode());
        }

        throw ex;
      }

      m.set(facet, servant);
    }
  }, {
    key: "addDefaultServant",
    value: function addDefaultServant(servant, category) {
      Debug.assert(this._instance !== null); // Must not be called after destruction

      if (this._defaultServantMap.has(category)) {
        var ex = new Ice.AlreadyRegisteredException();
        ex.kindOfObject = "default servant";
        ex.id = category;
        throw ex;
      }

      this._defaultServantMap.set(category, servant);
    }
  }, {
    key: "removeServant",
    value: function removeServant(ident, facet) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      if (facet === null) {
        facet = "";
      }

      var m = this._servantMapMap.get(ident);

      if (m === undefined || !m.has(facet)) {
        var ex = new Ice.NotRegisteredException();
        ex.id = Ice.identityToString(ident, this._instance.toStringMode());
        ex.kindOfObject = "servant";

        if (facet.length > 0) {
          ex.id += " -f " + StringUtil.escapeString(facet, "", this._instance.toStringMode());
        }

        throw ex;
      }

      var obj = m.get(facet);
      m.delete(facet);

      if (m.size === 0) {
        this._servantMapMap.delete(ident);
      }

      return obj;
    }
  }, {
    key: "removeDefaultServant",
    value: function removeDefaultServant(category) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      var obj = this._defaultServantMap.get(category);

      if (obj === undefined) {
        var ex = new Ice.NotRegisteredException();
        ex.kindOfObject = "default servant";
        ex.id = category;
        throw ex;
      }

      this._defaultServantMap.delete(category);

      return obj;
    }
  }, {
    key: "removeAllFacets",
    value: function removeAllFacets(ident) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      var m = this._servantMapMap.get(ident);

      if (m === undefined) {
        var ex = new Ice.NotRegisteredException();
        ex.id = Ice.identityToString(ident, this._instance.toStringMode());
        ex.kindOfObject = "servant";
        throw ex;
      }

      this._servantMapMap.delete(ident);

      return m;
    }
  }, {
    key: "findServant",
    value: function findServant(ident, facet) {
      if (facet === null) {
        facet = "";
      }

      var m = this._servantMapMap.get(ident);

      var obj = null;

      if (m === undefined) {
        obj = this._defaultServantMap.get(ident.category);

        if (obj === undefined) {
          obj = this._defaultServantMap.get("");
        }
      } else {
        obj = m.get(facet);
      }

      return obj === undefined ? null : obj;
    }
  }, {
    key: "findDefaultServant",
    value: function findDefaultServant(category) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      var ds = this._defaultServantMap.get(category);

      return ds === undefined ? null : ds;
    }
  }, {
    key: "findAllFacets",
    value: function findAllFacets(ident) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      var m = this._servantMapMap.get(ident);

      if (m !== undefined) {
        return new Map(m);
      }

      return new Map();
    }
  }, {
    key: "hasServant",
    value: function hasServant(ident) {
      var m = this._servantMapMap.get(ident);

      if (m === undefined) {
        return false;
      } else {
        Debug.assert(m.size > 0);
        return true;
      }
    }
  }, {
    key: "addServantLocator",
    value: function addServantLocator(locator, category) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      if (this._locatorMap.has(category)) {
        var ex = new Ice.AlreadyRegisteredException();
        ex.id = StringUtil.escapeString(category, "", this._instance.toStringMode());
        ex.kindOfObject = "servant locator";
        throw ex;
      }

      this._locatorMap.set(category, locator);
    }
  }, {
    key: "removeServantLocator",
    value: function removeServantLocator(category) {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      var l = this._locatorMap.get(category);

      if (l === undefined) {
        var ex = new Ice.NotRegisteredException();
        ex.id = StringUtil.escapeString(category, "", this._instance.toStringMode());
        ex.kindOfObject = "servant locator";
        throw ex;
      }

      this._locatorMap.delete(category);

      return l;
    }
  }, {
    key: "findServantLocator",
    value: function findServantLocator(category) {
      var l = this._locatorMap.get(category);

      return l === undefined ? null : l;
    } //
    // Only for use by Ice.ObjectAdapterI.
    //

  }, {
    key: "destroy",
    value: function destroy() {
      Debug.assert(this._instance !== null); // Must not be called after destruction.

      var logger = this._instance.initializationData().logger;

      this._servantMapMap.clear();

      this._defaultServantMap.clear();

      var locatorMap = new Map(this._locatorMap);

      this._locatorMap.clear();

      this._instance = null;

      var _iterator = _createForOfIteratorHelper(locatorMap),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              locator = _step$value[1];

          try {
            locator.deactivate(key);
          } catch (ex) {
            logger.error("exception during locator deactivation:\nobject adapter: `" + this._adapterName + "'\nlocator category: `" + key + "'\n" + ex.toString());
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return ServantManager;
}();

Ice.ServantManager = ServantManager;
module.exports.Ice = Ice;