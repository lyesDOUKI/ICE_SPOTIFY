"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice;

require("../Ice/StringUtil");

require("../Ice/UUID");

var _ModuleRegistry = Ice._ModuleRegistry;
var StringUtil = Ice.StringUtil;

function setInternal(map, key, value, hash, index) {
  //
  // Search for an entry with the same key.
  //
  for (var e = map._table[index]; e !== null; e = e._nextInBucket) {
    if (e._hash === hash && map.keysEqual(key, e._key)) {
      //
      // Found a match, update the value.
      //
      e._value = value;
      return undefined;
    }
  } //
  // No match found, add a new entry.
  //


  map.add(key, value, hash, index);
  return undefined;
}

function compareEquals(v1, v2) {
  if (v1 === v2) {
    return true;
  }

  if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {
    return false;
  }

  return v1.equals(v2);
}

function compareIdentity(v1, v2) {
  return v1 === v2;
}

var HashMap = /*#__PURE__*/function () {
  function HashMap(arg1, arg2) {
    _classCallCheck(this, HashMap);

    //
    // The first argument can be a HashMap or the keyComparator, the second
    // argument if present is always the value comparator.
    //
    var h, keyComparator, valueComparator;

    if (typeof arg1 == "function") {
      keyComparator = arg1;
      valueComparator = arg2;
    } else if (arg1 instanceof HashMap) {
      h = arg1;
      keyComparator = h.keyComparator;
      valueComparator = h.valueComparator;
    }

    this._size = 0;
    this._head = null;
    this._initialCapacity = 32;
    this._loadFactor = 0.75;
    this._table = [];
    this._keyComparator = typeof keyComparator == "function" ? keyComparator : compareIdentity;
    this._valueComparator = typeof valueComparator == "function" ? valueComparator : compareIdentity;

    if (h instanceof HashMap && h._size > 0) {
      this._threshold = h._threshold;
      this._table.length = h._table.length;

      for (var i = 0; i < h._table.length; i++) {
        this._table[i] = null;
      }

      this.merge(h);
    } else {
      this._threshold = this._initialCapacity * this._loadFactor;

      for (var _i = 0; _i < this._initialCapacity; _i++) {
        this._table[_i] = null;
      }
    }
  }

  _createClass(HashMap, [{
    key: "set",
    value: function set(key, value) {
      var r = this.computeHash(key); // Returns an object with key,hash members.

      var index = this.hashIndex(r.hash, this._table.length);
      return setInternal(this, r.key, value, r.hash, index);
    }
  }, {
    key: "get",
    value: function get(key) {
      var r = this.computeHash(key); // Returns an object with key,hash members.

      var e = this.findEntry(r.key, r.hash);
      return e !== undefined ? e._value : undefined;
    }
  }, {
    key: "has",
    value: function has(key) {
      var r = this.computeHash(key); // Returns an object with key,hash members.

      return this.findEntry(r.key, r.hash) !== undefined;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var r = this.computeHash(key); // Returns an object with key,hash members.

      var index = this.hashIndex(r.hash, this._table.length); //
      // Search for an entry with the same key.
      //

      var prev = null;

      for (var e = this._table[index]; e !== null; e = e._nextInBucket) {
        if (e._hash === r.hash && this.keysEqual(r.key, e._key)) {
          //
          // Found a match.
          //
          this._size--; //
          // Remove from bucket.
          //

          if (prev !== null) {
            prev._nextInBucket = e._nextInBucket;
          } else {
            this._table[index] = e._nextInBucket;
          } //
          // Unlink the entry.
          //


          if (e._prev !== null) {
            e._prev._next = e._next;
          }

          if (e._next !== null) {
            e._next._prev = e._prev;
          }

          if (this._head === e) {
            this._head = e._next;
          }

          return e._value;
        }

        prev = e;
      }

      return undefined;
    }
  }, {
    key: "clear",
    value: function clear() {
      for (var i = 0; i < this._table.length; ++i) {
        this._table[i] = null;
      }

      this._head = null;
      this._size = 0;
    }
  }, {
    key: "forEach",
    value: function forEach(fn, obj) {
      obj = obj === undefined ? fn : obj;

      for (var e = this._head; e !== null; e = e._next) {
        fn.call(obj, e._value, e._key);
      }
    }
  }, {
    key: "entries",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function entries() {
      var e;
      return _regeneratorRuntime().wrap(function entries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              e = this._head;

            case 1:
              if (!(e !== null)) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return [e._key, e._value];

            case 4:
              e = e._next;
              _context.next = 1;
              break;

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, entries, this);
    })
  }, {
    key: "keys",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function keys() {
      var e;
      return _regeneratorRuntime().wrap(function keys$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e = this._head;

            case 1:
              if (!(e !== null)) {
                _context2.next = 7;
                break;
              }

              _context2.next = 4;
              return e._key;

            case 4:
              e = e._next;
              _context2.next = 1;
              break;

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, keys, this);
    })
  }, {
    key: "values",
    value: /*#__PURE__*/_regeneratorRuntime().mark(function values() {
      var e;
      return _regeneratorRuntime().wrap(function values$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              e = this._head;

            case 1:
              if (!(e !== null)) {
                _context3.next = 7;
                break;
              }

              _context3.next = 4;
              return e._value;

            case 4:
              e = e._next;
              _context3.next = 1;
              break;

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, values, this);
    })
  }, {
    key: "equals",
    value: function equals(other, valuesEqual) {
      var _this = this;

      if (other === null || !(other instanceof HashMap) || this._size !== other._size) {
        return false;
      }

      var eq;

      if (valuesEqual) {
        eq = valuesEqual;
      } else {
        eq = function eq(v1, v2) {
          return _this._valueComparator.call(_this._valueComparator, v1, v2);
        };
      }

      for (var e = this._head; e !== null; e = e._next) {
        var oe = other.findEntry(e._key, e._hash);

        if (oe === undefined || !eq(e._value, oe._value)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "merge",
    value: function merge(from) {
      for (var e = from._head; e !== null; e = e._next) {
        setInternal(this, e._key, e._value, e._hash, this.hashIndex(e._hash, this._table.length));
      }
    }
  }, {
    key: "add",
    value: function add(key, value, hash, index) {
      //
      // Create a new table entry.
      //
      var e = Object.create(null, {
        key: {
          enumerable: true,
          get: function get() {
            return this._key;
          }
        },
        value: {
          enumerable: true,
          get: function get() {
            return this._value;
          }
        },
        next: {
          enumerable: true,
          get: function get() {
            return this._next;
          }
        },
        _key: {
          enumerable: false,
          writable: true,
          value: key
        },
        _value: {
          enumerable: false,
          writable: true,
          value: value
        },
        _prev: {
          enumerable: false,
          writable: true,
          value: null
        },
        _next: {
          enumerable: false,
          writable: true,
          value: null
        },
        _nextInBucket: {
          enumerable: false,
          writable: true,
          value: null
        },
        _hash: {
          enumerable: false,
          writable: true,
          value: hash
        }
      });
      e._nextInBucket = this._table[index];
      this._table[index] = e;
      e._next = this._head;

      if (this._head !== null) {
        this._head._prev = e;
      }

      this._head = e;
      this._size++;

      if (this._size >= this._threshold) {
        this.resize(this._table.length * 2);
      }
    }
  }, {
    key: "resize",
    value: function resize(capacity) {
      var newTable = new Array(capacity).fill(null); //
      // Re-assign all entries to buckets.
      //

      for (var e = this._head; e !== null; e = e._next) {
        var index = this.hashIndex(e._hash, capacity);
        e._nextInBucket = newTable[index];
        newTable[index] = e;
      }

      this._table = newTable;
      this._threshold = capacity * this._loadFactor;
    }
  }, {
    key: "findEntry",
    value: function findEntry(key, hash) {
      var index = this.hashIndex(hash, this._table.length); //
      // Search for an entry with the same key.
      //

      for (var e = this._table[index]; e !== null; e = e._nextInBucket) {
        if (e._hash === hash && this.keysEqual(key, e._key)) {
          return e;
        }
      }

      return undefined;
    }
  }, {
    key: "hashIndex",
    value: function hashIndex(hash, len) {
      return hash & len - 1;
    }
  }, {
    key: "computeHash",
    value: function computeHash(v) {
      if (v === 0) {
        return {
          key: 0,
          hash: 0
        };
      }

      if (v === null) {
        if (HashMap._null === null) {
          var uuid = Ice.generateUUID();
          HashMap._null = {
            key: uuid,
            hash: StringUtil.hashCode(uuid)
          };
        }

        return HashMap._null;
      }

      if (v === undefined) {
        throw new RangeError("cannot compute hash for undefined value");
      }

      if (typeof v.hashCode === "function") {
        return {
          key: v,
          hash: v.hashCode()
        };
      }

      var type = _typeof(v);

      if (type === "string" || v instanceof String) {
        return {
          key: v,
          hash: StringUtil.hashCode(v)
        };
      } else if (type === "number" || v instanceof Number) {
        if (isNaN(v)) {
          if (HashMap._nan === null) {
            var _uuid = Ice.generateUUID();

            HashMap._nan = {
              key: _uuid,
              hash: StringUtil.hashCode(_uuid)
            };
          }

          return HashMap._nan;
        }

        return {
          key: v,
          hash: v.toFixed(0)
        };
      } else if (type === "boolean" || v instanceof Boolean) {
        return {
          key: v,
          hash: v ? 1 : 0
        };
      }

      throw new RangeError("cannot compute hash for value of type " + type);
    }
  }, {
    key: "keysEqual",
    value: function keysEqual(k1, k2) {
      return this._keyComparator.call(this._keyComparator, k1, k2);
    }
  }, {
    key: "size",
    get: function get() {
      return this._size;
    }
  }]);

  return HashMap;
}();

HashMap.prototype[Symbol.iterator] = HashMap.prototype.entries;
Ice.HashMap = HashMap;
HashMap.compareEquals = compareEquals;
HashMap.compareIdentity = compareIdentity;
HashMap._null = null;
HashMap._nan = null;
var Slice = Ice.Slice;

Slice.defineDictionary = function (module, name, helperName, keyHelper, valueHelper, fixed, keysEqual, valueType) {
  if (keysEqual === undefined) {
    module[name] = Map;
  } else {
    //
    // Define a constructor function for a dictionary whose key type requires
    // comparison using an equals() method instead of the native comparison
    // operators.
    //
    module[name] = function (h) {
      return new HashMap(h || keysEqual);
    };
  }

  var helper = null;
  Object.defineProperty(module, helperName, {
    get: function get() {
      if (helper === null) {
        helper = Ice.StreamHelpers.generateDictHelper(_ModuleRegistry.type(keyHelper), _ModuleRegistry.type(valueHelper), fixed, _ModuleRegistry.type(valueType), module[name]);
      }

      return helper;
    }
  });
};

module.exports.Ice = Ice;